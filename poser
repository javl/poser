#!/usr/bin/env python
import json, re, requests, os, subprocess

# You can enter your Github credentials to increase the 
# API rate limit from 60 to 5,000 calls per hour
api_user = ''
api_password = ''

# Loop so you can immediately retry in case the given username doesn't exists
while (1):
    email = None
    real_name = None
    username = raw_input("\nAs which user would you like to commit: ").lower()

    # If given, use Github credentials to extend API rate limit
    if api_user != '' and api_password != '':
        req_userdata = requests.get('https://api.github.com/users/%s' % username, auth=(api_user, api_password))
        req_events = requests.get('https://api.github.com/users/%s/events' % username, auth=(api_user, api_password))
    else:
        req_userdata = requests.get('https://api.github.com/users/%s' % username)
        req_events = requests.get('https://api.github.com/users/%s/events' % username)

    result_json = json.loads(req_userdata.text)

    # See if we can find the name of the user
    try:
        real_name = result_json['name']
    except: pass      
    
    result_json = json.loads(req_events.text)

    # Catch some error messages
    if 'message' in result_json:
        if result_json['message'] == 'Not Found':
            print 'There is no user called %s, or can\'t find the needed user date.' % username
        elif result_json['message'][:23] == 'API rate limit exceeded':
            print "API rate limit exceeded; enter your Github credentials at"
            print "the top of the poser script to extend the limit."
            exit()
        else:
            print "Uncaught message: "
            print result_json['message']
            exit()

    # No error, so try to find email
    else:
        for event in result_json:
            try:
                for commit in event['payload']['commits']:
                    try:
                        if commit['author']['name'] == username or commit['author']['name'] == real_name:
                            email = commit['author']['email']
                            break;
                    except: 
                        pass
            except:
                pass

        if email == None:
            print 'sorry, can\'t find the email for user %s' % username

        # Email found; set the username + email and run the push command
        else:

            print 'Pushing as user %s with address %s' % (username, email)

            commit_message = raw_input("Enter your commit message: ")

            # Save the original name and email
            proc = subprocess.Popen(['git config user.name'], stdout=subprocess.PIPE, shell=True)
            (prev_name, err) = proc.communicate()
            proc = subprocess.Popen(['git config user.email'], stdout=subprocess.PIPE, shell=True)
            (prev_email, err) = proc.communicate()

            # Set email to that of the given user
            os.system('git config user.name "%s"' % username)
            os.system('git config user.email "%s"' % email)

            # commit and push
            os.system('git commit -m "%s"' % commit_message)
            os.system('git push -u origin master')

            # Restore original username and email
            os.system('git config user.name "%s"' % prev_name.rstrip())
            os.system('git config user.email "%s"' % prev_email.rstrip())

            # All done, exit!
            exit()